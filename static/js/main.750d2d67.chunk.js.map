{"version":3,"sources":["App.js","index.js"],"names":["App","useState","parseInt","localStorage","getItem","primos","setPrimos","fates","setFates","prevPulls","setPrevPulls","totalPulls","setTotalPulls","numberOfHardPities","setNumberOfHardPities","primosToNextHardPity","setPrimosToNextHardPity","canDoSinglePull","setCanDoSinglePull","canDoTenPull","setCanDoTenPull","useEffect","updateTotalPulls","setItem","updatePrimos","newValue","updateFates","updatePrevPulls","updatedTotalPulls","updatedNumberOfHardPities","Math","floor","primosToNextPity","ceil","updateCanDoSinglePull","updateCanDoTenPull","Container","className","Row","Col","lg","Form","Group","controlId","Label","Control","type","min","onChange","e","target","value","Button","variant","onClick","disabled","primosToMakeDifference","style","textAlign","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.750d2d67.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { useState, useEffect } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nfunction App() {\n\n  // state hooks\n  const [primos, setPrimos] = useState(parseInt(localStorage.getItem(\"primos\")) || parseInt(0));\n  const [fates, setFates] = useState(parseInt(localStorage.getItem(\"fates\")) || parseInt(0));\n  const [prevPulls, setPrevPulls] = useState(parseInt(localStorage.getItem(\"prevPulls\")) || parseInt(0));\n  const [totalPulls, setTotalPulls] = useState(0);\n  const [numberOfHardPities, setNumberOfHardPities] = useState(0);\n  const [primosToNextHardPity, setPrimosToNextHardPity] = useState(14400);\n  const [canDoSinglePull, setCanDoSinglePull] = useState(false);        // use this state variable to enable/disable single pull button\n  const [canDoTenPull, setCanDoTenPull] = useState(false);              // use this state variable to enable/disable ten pull button\n\n  // useEffect to run a function on page load\n  useEffect(() => {\n    // set the total pulls and hard pity state variables from saved values\n    updateTotalPulls(primos, fates, prevPulls);\n  });\n\n  // use useEffect to save values to local storage when ever values are updated\n  useEffect(() => {\n    localStorage.setItem(\"primos\", primos);\n    localStorage.setItem(\"fates\", fates);\n    localStorage.setItem(\"prevPulls\", prevPulls);\n  }, [primos, fates, prevPulls]);\n\n  // functions to update state\n  const updatePrimos = (newValue) => {  // newValue is a number\n    setPrimos(newValue);\n    updateTotalPulls(newValue, fates, prevPulls);\n  };\n\n  const updateFates = (newValue) => {\n    setFates(newValue);\n    updateTotalPulls(primos, newValue, prevPulls);\n  };\n\n  const updatePrevPulls = (newValue) => {\n    setPrevPulls(newValue);\n    updateTotalPulls(primos, fates, newValue);\n  }\n\n  const updateTotalPulls = (primos, fates, prevPulls) => {\n    let pullsFromPrimos = primos / 160;\n    let updatedTotalPulls = pullsFromPrimos + fates + prevPulls\n    setTotalPulls(updatedTotalPulls);\n\n    let updatedNumberOfHardPities = Math.floor(updatedTotalPulls / 90);\n    setNumberOfHardPities(updatedNumberOfHardPities);\n\n    let primosToNextPity = Math.ceil((90 - (updatedTotalPulls % 90)) * 160);\n    setPrimosToNextHardPity(primosToNextPity);\n\n    // update whether or not single or ten pulls are possible\n    updateCanDoSinglePull();\n    updateCanDoTenPull();\n  }\n\n  // event handlers for the single and ten pull buttons\n  const doSinglePull = () => {\n    if (fates >= 1) {\n      setFates(fates - 1);\n      updatePrevPulls(prevPulls + 1);\n    } else if (primos >= 160) {\n      setPrimos(primos - 160);\n      updatePrevPulls(prevPulls + 1);\n    }\n  }\n\n  const doTenPull = () => {\n    if (fates >= 10) {\n      setFates(fates - 10);\n      updatePrevPulls(prevPulls + 10);\n    } else if (fates > 0) {\n      let primosToMakeDifference = 1600 - (fates * 160);\n      if (primos >= primosToMakeDifference) {\n        setFates(0);\n        setPrimos(primos - primosToMakeDifference);\n        updatePrevPulls(prevPulls + 10);\n      }\n    } else if (primos >= 1600) {\n      setPrimos(primos - 1600);\n      updatePrevPulls(prevPulls + 10);\n    }\n  }\n\n  // determine if single or ten pulls are possible\n  const updateCanDoSinglePull = () => {\n    if (fates >= 1) {\n      setCanDoSinglePull(true);\n    } else if (primos >= 160) {\n      setCanDoSinglePull(true);\n    } else {\n      setCanDoSinglePull(false);\n    }\n  }\n\n  const updateCanDoTenPull = () => {\n    if (fates >= 10) {\n      setCanDoTenPull(true);\n    } else if (fates > 0) {\n      let primosToMakeDifference = 1600 - (fates * 160);\n      if (primos >= primosToMakeDifference) {\n        setCanDoTenPull(true);\n      }\n    } else if (primos >= 1600) {\n      setCanDoTenPull(true);\n    } else {\n      setCanDoTenPull(false);\n    }\n  }\n\n  return (\n    <Container className=\"mt-4\" >\n      <Row className=\"justify-content-center\">\n        <Col lg={6}>\n          <Form>\n\n            <Form.Group className=\"mb-3\" controlId=\"primos-amt\">\n              <Form.Label>How many Primogems do you have?</Form.Label>\n              <Row>\n                <Col>\n                  <Form.Control type=\"number\" min={0} onChange={(e) => updatePrimos(parseInt(e.target.value))} value={primos !== 0 ? primos : \"\"}></Form.Control>\n                </Col>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" onClick={() => updatePrimos(primos + 60)}>Add Dailies (+60)</Button>\n                </div>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" onClick={() => updatePrimos(primos + 90)}>Add Welkin (+90)</Button>\n                </div>\n              </Row>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"fates-amt\">\n              <Form.Label>How many Fates do you have?</Form.Label>\n              <Row>\n                <Col>\n                  <Form.Control type=\"number\" min={0} onChange={(e) => updateFates(parseInt(e.target.value))} value={fates !== 0 ? fates : \"\"}></Form.Control>\n                </Col>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" onClick={() => updateFates(fates + 1)}>Add One</Button>\n                </div>\n              </Row>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"prev-pulls-amt\">\n              <Form.Label>How many pulls have you already done?</Form.Label>\n              <Row>\n                <Col>\n                  <Form.Control type=\"number\" min={0} onChange={(e) => updatePrevPulls(parseInt(e.target.value))} value={prevPulls !== 0 ? prevPulls : \"\"}></Form.Control>\n                </Col>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" disabled={!canDoSinglePull} onClick={doSinglePull}>1 Pull</Button>\n                </div>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" disabled={!canDoTenPull} onClick={doTenPull}>10 Pull</Button>\n                </div>\n              </Row>\n            </Form.Group>\n\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col lg={6} style={{ textAlign: \"center\" }}>\n          <p className=\"h4 mb-3\">Total Pulls on Banner: {Math.floor(totalPulls)}</p>\n          <div>You can hit hard pity {numberOfHardPities} {numberOfHardPities === 1 ? 'time' : 'times'}</div>\n          <div>You need <span style={{ color: \"#0d6efd\" }}>{primosToNextHardPity}</span> primos to reach your next hard pity</div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}