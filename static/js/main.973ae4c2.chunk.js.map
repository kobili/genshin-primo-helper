{"version":3,"sources":["components/PrimogemCalc.js","components/MaterialInputBox.js","components/TalentMatTracker.js","App.js","index.js"],"names":["PrimogemCalc","useState","parseInt","localStorage","getItem","primos","setPrimos","fates","setFates","prevPulls","setPrevPulls","totalPulls","setTotalPulls","numberOfHardPities","setNumberOfHardPities","primosToNextHardPity","setPrimosToNextHardPity","canDoSinglePull","setCanDoSinglePull","canDoTenPull","setCanDoTenPull","useEffect","updateTotalPulls","setItem","updatePrimos","newValue","updateFates","updatePrevPulls","updatedTotalPulls","updatedNumberOfHardPities","Math","floor","primosToNextPity","ceil","updateCanDoSinglePull","updateCanDoTenPull","Container","className","Row","Col","lg","Form","Group","controlId","Label","Control","type","min","onChange","e","target","value","Button","variant","onClick","disabled","primosToMakeDifference","style","textAlign","color","MaterialInputBox","setValue","buttonStyle","height","width","fontSize","TalentMatTracker","goldBooksAcquired","setGoldBooksAcquired","silverBooksAcquired","setSilverBooksAcquired","brownBooksAcquired","setBrownBooksAcquired","totalGoldBooks","setTotalGoldBooks","setTotalSilverBooks","calculateTotalBooks","spareBrownBooks","silverBooks","spareSilverBooks","goldBooks","App","Tabs","defaultActiveKey","id","Tab","eventKey","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.973ae4c2.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { useState, useEffect } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nfunction PrimogemCalc() {\n\n  // state hooks\n  const [primos, setPrimos] = useState(parseInt(localStorage.getItem(\"primos\")) || parseInt(0));\n  const [fates, setFates] = useState(parseInt(localStorage.getItem(\"fates\")) || parseInt(0));\n  const [prevPulls, setPrevPulls] = useState(parseInt(localStorage.getItem(\"prevPulls\")) || parseInt(0));\n  const [totalPulls, setTotalPulls] = useState(0);\n  const [numberOfHardPities, setNumberOfHardPities] = useState(0);\n  const [primosToNextHardPity, setPrimosToNextHardPity] = useState(14400);\n  const [canDoSinglePull, setCanDoSinglePull] = useState(false);        // use this state variable to enable/disable single pull button\n  const [canDoTenPull, setCanDoTenPull] = useState(false);              // use this state variable to enable/disable ten pull button\n\n  // useEffect to run a function on page load\n  useEffect(() => {\n    // set the total pulls and hard pity state variables from saved values\n    updateTotalPulls(primos, fates, prevPulls);\n  });\n\n  // use useEffect to save values to local storage when ever values are updated\n  useEffect(() => {\n    localStorage.setItem(\"primos\", primos);\n    localStorage.setItem(\"fates\", fates);\n    localStorage.setItem(\"prevPulls\", prevPulls);\n  }, [primos, fates, prevPulls]);\n\n  // functions to update state\n  const updatePrimos = (newValue) => {  // newValue is a number\n    setPrimos(newValue);\n    updateTotalPulls(newValue, fates, prevPulls);\n  };\n\n  const updateFates = (newValue) => {\n    setFates(newValue);\n    updateTotalPulls(primos, newValue, prevPulls);\n  };\n\n  const updatePrevPulls = (newValue) => {\n    setPrevPulls(newValue);\n    updateTotalPulls(primos, fates, newValue);\n  }\n\n  const updateTotalPulls = (primos, fates, prevPulls) => {\n    let pullsFromPrimos = primos / 160;\n    let updatedTotalPulls = pullsFromPrimos + fates + prevPulls\n    setTotalPulls(updatedTotalPulls);\n\n    let updatedNumberOfHardPities = Math.floor(updatedTotalPulls / 90);\n    setNumberOfHardPities(updatedNumberOfHardPities);\n\n    let primosToNextPity = Math.ceil((90 - (updatedTotalPulls % 90)) * 160);\n    setPrimosToNextHardPity(primosToNextPity);\n\n    // update whether or not single or ten pulls are possible\n    updateCanDoSinglePull();\n    updateCanDoTenPull();\n  }\n\n  // event handlers for the single and ten pull buttons\n  const doSinglePull = () => {\n    if (fates >= 1) {\n      setFates(fates - 1);\n      updatePrevPulls(prevPulls + 1);\n    } else if (primos >= 160) {\n      setPrimos(primos - 160);\n      updatePrevPulls(prevPulls + 1);\n    }\n  }\n\n  const doTenPull = () => {\n    if (fates >= 10) {\n      setFates(fates - 10);\n      updatePrevPulls(prevPulls + 10);\n    } else if (fates > 0) {\n      let primosToMakeDifference = 1600 - (fates * 160);\n      if (primos >= primosToMakeDifference) {\n        setFates(0);\n        setPrimos(primos - primosToMakeDifference);\n        updatePrevPulls(prevPulls + 10);\n      }\n    } else if (primos >= 1600) {\n      setPrimos(primos - 1600);\n      updatePrevPulls(prevPulls + 10);\n    }\n  }\n\n  // determine if single or ten pulls are possible\n  const updateCanDoSinglePull = () => {\n    if (fates >= 1) {\n      setCanDoSinglePull(true);\n    } else if (primos >= 160) {\n      setCanDoSinglePull(true);\n    } else {\n      setCanDoSinglePull(false);\n    }\n  }\n\n  const updateCanDoTenPull = () => {\n    if (fates >= 10) {\n      setCanDoTenPull(true);\n    } else if (fates > 0) {\n      let primosToMakeDifference = 1600 - (fates * 160);\n      if (primos >= primosToMakeDifference) {\n        setCanDoTenPull(true);\n      }\n    } else if (primos >= 1600) {\n      setCanDoTenPull(true);\n    } else {\n      setCanDoTenPull(false);\n    }\n  }\n\n  return (\n    <Container className=\"mt-4\" >\n      <Row className=\"justify-content-center\">\n        <Col lg={6}>\n          <Form>\n\n            <Form.Group className=\"mb-3\" controlId=\"primos-amt\">\n              <Form.Label>How many Primogems do you have?</Form.Label>\n              <Row>\n                <Col>\n                  <Form.Control type=\"number\" min={0} onChange={(e) => updatePrimos(parseInt(e.target.value))} value={primos !== 0 ? primos : \"\"}></Form.Control>\n                </Col>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" onClick={() => updatePrimos(primos + 60)}>Add Dailies (+60)</Button>\n                </div>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" onClick={() => updatePrimos(primos + 90)}>Add Welkin (+90)</Button>\n                </div>\n              </Row>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"fates-amt\">\n              <Form.Label>How many Fates do you have?</Form.Label>\n              <Row>\n                <Col>\n                  <Form.Control type=\"number\" min={0} onChange={(e) => updateFates(parseInt(e.target.value))} value={fates !== 0 ? fates : \"\"}></Form.Control>\n                </Col>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" onClick={() => updateFates(fates + 1)}>Add One</Button>\n                </div>\n              </Row>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"prev-pulls-amt\">\n              <Form.Label>How many pulls have you already done?</Form.Label>\n              <Row>\n                <Col>\n                  <Form.Control type=\"number\" min={0} onChange={(e) => updatePrevPulls(parseInt(e.target.value))} value={prevPulls !== 0 ? prevPulls : \"\"}></Form.Control>\n                </Col>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" disabled={!canDoSinglePull} onClick={doSinglePull}>1 Pull</Button>\n                </div>\n                <div className=\"col-auto\">\n                  <Button variant=\"outline-primary\" disabled={!canDoTenPull} onClick={doTenPull}>10 Pull</Button>\n                </div>\n              </Row>\n            </Form.Group>\n\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col lg={6} style={{ textAlign: \"center\" }}>\n          <p className=\"h4 mb-3\">Total Pulls on Banner: {Math.floor(totalPulls)}</p>\n          <div>You can hit hard pity {numberOfHardPities} {numberOfHardPities === 1 ? 'time' : 'times'}</div>\n          <div>You need <span style={{ color: \"#0d6efd\" }}>{primosToNextHardPity}</span> primos to reach your next hard pity</div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default PrimogemCalc;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './MaterialInputBox.css';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nfunction MaterialInputBox({value, setValue}) {\n\n    const inputBoxStyle = {\n        width: \"65px\",\n        height: \"65px\",\n        fontSize: \"20px\",\n        textAlign: \"center\"\n    };\n\n    const buttonStyle = {\n        height: \"65px\",\n        width: \"36px\"\n    }\n\n    return (\n        <Col lg={2}>\n            <Row>\n                <div className=\"col-auto p-0\">\n                    <Button variant=\"primary\"\n                        style={buttonStyle}\n                        onClick={() => setValue(value + 1)}>\n                        +\n                    </Button>\n                </div>\n                <div className=\"col-auto p-0\">\n                    <Form.Control\n                        style={inputBoxStyle}\n                        value={value}\n                        min={0}\n                        type=\"number\"\n                        onChange={(e) => setValue(parseInt(e.target.value))}\n                    />\n                </div>\n                <div className=\"col-auto p-0\">\n                    <Button variant=\"primary\"\n                        style={buttonStyle}\n                        onClick={() => setValue(value >= 1 ? value - 1 : 0)}>\n                        -\n                    </Button>\n                </div>\n            </Row>\n        </Col>\n    );\n}\n\nexport default MaterialInputBox;","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { useState, useEffect } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport MaterialInputBox from './MaterialInputBox';\n\nfunction TalentMatTracker() {\n\n    const GOLD_BOOKS_REQUIRED = 114;\n    const SILVER_BOOKS_REQUIRED = 63;\n    const BROWN_BOOKS_REQUIRED = 9;\n\n    let [goldBooksAcquired, setGoldBooksAcquired] = useState(parseInt(localStorage.getItem(\"goldBooks\")) || parseInt(0));\n    let [silverBooksAcquired, setSilverBooksAcquired] = useState(parseInt(localStorage.getItem(\"silverBooks\")) || parseInt(0));\n    let [brownBooksAcquired, setBrownBooksAcquired] = useState(parseInt(localStorage.getItem(\"brownBooks\")) || parseInt(0));\n\n    let [totalGoldBooks, setTotalGoldBooks] = useState(0);\n    let [totalSilverBooks, setTotalSilverBooks] = useState(0);\n\n\n    useEffect(() => {\n        calculateTotalBooks();\n    });\n\n    useEffect(() => {\n        // save state vars to local storage on change\n        localStorage.setItem(\"goldBooks\", goldBooksAcquired);\n        localStorage.setItem(\"silverBooks\", silverBooksAcquired);\n        localStorage.setItem(\"brownBooks\", brownBooksAcquired);\n\n        calculateTotalBooks();\n    }, [goldBooksAcquired, silverBooksAcquired, brownBooksAcquired]);\n\n    const calculateTotalBooks = () => {\n        // calculate the total amount of silver and gold books when acquired state variables are changed\n        let spareBrownBooks = brownBooksAcquired > BROWN_BOOKS_REQUIRED ? brownBooksAcquired - BROWN_BOOKS_REQUIRED : 0;\n        let silverBooks = silverBooksAcquired + Math.floor(spareBrownBooks / 3);\n        let spareSilverBooks = silverBooks > SILVER_BOOKS_REQUIRED ? silverBooks - SILVER_BOOKS_REQUIRED : 0;\n        let goldBooks = goldBooksAcquired + Math.floor(spareSilverBooks / 3);\n\n        setTotalGoldBooks(goldBooks);\n        setTotalSilverBooks(silverBooks);\n    }\n\n    return (\n        <Container>\n            <Row className=\"justify-content-center mb-3\">\n                {/* Input for gold books */}\n                <MaterialInputBox\n                    value={goldBooksAcquired}\n                    setValue={setGoldBooksAcquired}\n                />\n\n                {/* Input for silver books */}\n                <MaterialInputBox\n                    value={silverBooksAcquired}\n                    setValue={setSilverBooksAcquired}\n                />\n\n                {/* Input for brown books */}\n                <MaterialInputBox\n                    value={brownBooksAcquired}\n                    setValue={setBrownBooksAcquired}\n                />\n            </Row>\n            <Row className=\"justify-content-center mb-3\">\n                You have a total of {totalGoldBooks} gold books.\n            </Row>\n            {totalGoldBooks < GOLD_BOOKS_REQUIRED &&\n                <>\n                    <Row className=\"justify-content-center\">\n                        You need {GOLD_BOOKS_REQUIRED - totalGoldBooks} more gold books\n                    </Row>\n                    {/* <Row className=\"justify-content-center\">\n                        -OR-\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        {(GOLD_BOOKS_REQUIRED - totalGoldBooks) * 3} more silver books\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        -OR-\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        {(GOLD_BOOKS_REQUIRED - totalGoldBooks) * 9} more brown books\n                    </Row> */}\n                </>\n            }\n        </Container>\n    );\n}\n\nexport default TalentMatTracker;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs'\n\nimport PrimogemCalc from './components/PrimogemCalc';\nimport TalentMatTracker from './components/TalentMatTracker';\n\nfunction App() {\n  return (\n    // <>\n    //   <PrimogemCalc />\n    //   <TalentMatTracker />\n    // </>\n\n    <Tabs defaultActiveKey=\"primogem-calc\" id=\"application-tab\" className=\"mb-3\">\n      <Tab eventKey=\"primogem-calc\" title=\"Primogem Tracker\">\n        <PrimogemCalc />\n      </Tab>\n      <Tab eventKey=\"talent-mat-tracker\" title=\"Talent Material Tracker\">\n        <TalentMatTracker />\n      </Tab>\n    </Tabs>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}