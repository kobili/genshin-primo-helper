{"version":3,"sources":["App.js","index.js"],"names":["App","useState","parseInt","localStorage","getItem","primos","setPrimos","fates","setFates","prevPulls","setPrevPulls","totalPulls","setTotalPulls","numberOfHardPities","setNumberOfHardPities","primosToNextHardPity","setPrimosToNextHardPity","useEffect","updateTotalPulls","setItem","updatedTotalPulls","updatedNumberOfHardPities","Math","floor","primosToNextPity","ceil","Container","className","Row","Col","lg","Form","Group","controlId","Label","Control","type","min","onChange","e","newValue","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA+FeA,MArFf,WAAe,MAGeC,mBAAUC,SAASC,aAAaC,QAAQ,YAAcF,SAAS,IAH9E,mBAGNG,EAHM,KAGEC,EAHF,OAIaL,mBAAUC,SAASC,aAAaC,QAAQ,WAAaF,SAAS,IAJ3E,mBAINK,EAJM,KAICC,EAJD,OAKqBP,mBAAUC,SAASC,aAAaC,QAAQ,eAAiBF,SAAS,IALvF,mBAKNO,EALM,KAKKC,EALL,OAMuBT,mBAAS,GANhC,mBAMNU,EANM,KAMMC,EANN,OAOuCX,mBAAS,GAPhD,mBAONY,EAPM,KAOcC,EAPd,OAQ2Cb,mBAAS,OARpD,mBAQNc,EARM,KAQgBC,EARhB,KAWbC,qBAAU,WAERC,EAAiBb,EAAQE,EAAOE,MAIlCQ,qBAAU,WACNd,aAAagB,QAAQ,SAAUd,GAC/BF,aAAagB,QAAQ,QAASZ,GAC9BJ,aAAagB,QAAQ,YAAaV,KAInC,CAACJ,EAAQE,EAAOE,IAGnB,IAeMS,EAAmB,SAACb,EAAQE,EAAOE,GACvC,IACIW,EADkBf,EAAS,IACWE,EAAQE,EAClDG,EAAcQ,GAEd,IAAIC,EAA4BC,KAAKC,MAAMH,EAAoB,IAC/DN,EAAsBO,GAEtB,IAAIG,EAAmBF,KAAKG,KAAuC,KAAjC,GAAML,EAAoB,KAC5DJ,EAAwBQ,IAG1B,OACE,cAACE,EAAA,EAAD,CAAWC,UAAU,OAArB,SACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,aAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,8CACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,IAAK,EAAGC,SAAU,SAACC,GAAD,OAlCpCC,EAkCwDtC,SAASqC,EAAEE,OAAOC,OAjC9FpC,EAAUkC,QACVtB,EAAiBsB,EAAUjC,EAAOE,GAFf,IAAC+B,GAkCmFE,MAAkB,IAAXrC,EAAeA,EAAS,QAE9H,eAAC0B,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,YAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,0CACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,IAAK,EAAGC,SAAU,SAACC,GAAD,OAjCrCC,EAiCwDtC,SAASqC,EAAEE,OAAOC,OAhC7FlC,EAASgC,QACTtB,EAAiBb,EAAQmC,EAAU/B,GAFjB,IAAC+B,GAiCmFE,MAAiB,IAAVnC,EAAcA,EAAQ,QAE3H,eAACwB,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,iBAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,oDACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,IAAK,EAAGC,SAAU,SAACC,GAAD,OAhCjCC,EAgCwDtC,SAASqC,EAAEE,OAAOC,OA/BjGhC,EAAa8B,QACbtB,EAAiBb,EAAQE,EAAOiC,GAFV,IAACA,GAgCmFE,MAAqB,IAAdjC,EAAkBA,EAAY,WAGzI,0DAA6Ba,KAAKC,MAAMZ,SAE1C,eAACkB,EAAA,EAAD,CAAKC,GAAI,EAAGH,UAAU,uBAAtB,UACE,yDAA4Bd,EAA5B,IAAwE,IAAvBA,EAA2B,OAAS,WACrF,4CAAeE,EAAf,mDClFV4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5d2c23db.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { useState, useEffect } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction App() {\n\n  // state hooks\n  const [primos, setPrimos] = useState( parseInt(localStorage.getItem(\"primos\")) || parseInt(0));\n  const [fates, setFates] = useState( parseInt(localStorage.getItem(\"fates\")) || parseInt(0));\n  const [prevPulls, setPrevPulls] = useState( parseInt(localStorage.getItem(\"prevPulls\")) || parseInt(0));\n  const [totalPulls, setTotalPulls] = useState(0);\n  const [numberOfHardPities, setNumberOfHardPities] = useState(0);\n  const [primosToNextHardPity, setPrimosToNextHardPity] = useState(14400);\n\n  // useEffect to run a function on page load\n  useEffect(() => {\n    // set the total pulls and hard pity state variables from saved values\n    updateTotalPulls(primos, fates, prevPulls);\n  });\n\n  // use useEffect to save values to local storage when ever values are updated\n  useEffect(() => {\n      localStorage.setItem(\"primos\", primos);\n      localStorage.setItem(\"fates\", fates);\n      localStorage.setItem(\"prevPulls\", prevPulls);\n      // localStorage.setItem(\"totalPulls\", totalPulls);\n      // localStorage.setItem(\"numberOfHardPities\", numberOfHardPities);\n      // localStorage.setItem(\"primosToNextHardPity\", primosToNextHardPity);\n  }, [primos, fates, prevPulls]);\n\n  // functions to update state\n  const updatePrimos = (newValue) => {  // newValue is a number\n    setPrimos(newValue);\n    updateTotalPulls(newValue, fates, prevPulls);\n  };\n\n  const updateFates = (newValue) => {\n    setFates(newValue);\n    updateTotalPulls(primos, newValue, prevPulls);\n  };\n\n  const updatePrevPulls = (newValue) => {\n    setPrevPulls(newValue);\n    updateTotalPulls(primos, fates, newValue);\n  }\n\n  const updateTotalPulls = (primos, fates, prevPulls) => {\n    let pullsFromPrimos = primos / 160;\n    let updatedTotalPulls = pullsFromPrimos + fates + prevPulls\n    setTotalPulls(updatedTotalPulls);\n\n    let updatedNumberOfHardPities = Math.floor(updatedTotalPulls / 90);\n    setNumberOfHardPities(updatedNumberOfHardPities);\n\n    let primosToNextPity = Math.ceil((90 - (updatedTotalPulls % 90)) * 160);\n    setPrimosToNextHardPity(primosToNextPity);\n  }\n\n  return (\n    <Container className=\"mt-4\">\n      <Row>\n        <Col lg={6}>\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"primos-amt\">\n              <Form.Label>How many Primogems do you have?</Form.Label>\n              <Form.Control type=\"number\" min={0} onChange={(e) => updatePrimos(parseInt(e.target.value))} value={primos !== 0 ? primos : \"\"}></Form.Control>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"fates-amt\">\n              <Form.Label>How many Fates do you have?</Form.Label>\n              <Form.Control type=\"number\" min={0} onChange={(e) => updateFates(parseInt(e.target.value))} value={fates !== 0 ? fates : \"\"}></Form.Control>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"prev-pulls-amt\">\n              <Form.Label>How many pulls have you already done?</Form.Label>\n              <Form.Control type=\"number\" min={0} onChange={(e) => updatePrevPulls(parseInt(e.target.value))} value={prevPulls !== 0 ? prevPulls : \"\"}></Form.Control>\n            </Form.Group>\n          </Form>\n          <div>Total Pulls on Banner: {Math.floor(totalPulls)}</div>\n        </Col>\n        <Col lg={6} className=\"align-content-center\">\n          <div>You can hit hard pity {numberOfHardPities} {numberOfHardPities === 1 ? 'time' : 'times'}</div>\n          <div>You need {primosToNextHardPity} primos to reach your next hard pity</div>\n        </Col>\n\n      </Row>\n    </Container>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}