{"version":3,"sources":["App.js","index.js"],"names":["App","useState","parseInt","localStorage","getItem","primos","setPrimos","fates","setFates","prevPulls","setPrevPulls","totalPulls","setTotalPulls","numberOfHardPities","setNumberOfHardPities","primosToNextHardPity","setPrimosToNextHardPity","useEffect","updateTotalPulls","setItem","updatePrimos","newValue","updatedTotalPulls","updatedNumberOfHardPities","Math","floor","primosToNextPity","ceil","Container","className","Row","Col","lg","Form","Group","controlId","Label","Control","type","min","onChange","e","target","value","Button","variant","onClick","style","textAlign","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAqGeA,MA1Ff,WAAe,MAGeC,mBAASC,SAASC,aAAaC,QAAQ,YAAcF,SAAS,IAH7E,mBAGNG,EAHM,KAGEC,EAHF,OAIaL,mBAASC,SAASC,aAAaC,QAAQ,WAAaF,SAAS,IAJ1E,mBAINK,EAJM,KAICC,EAJD,OAKqBP,mBAASC,SAASC,aAAaC,QAAQ,eAAiBF,SAAS,IALtF,mBAKNO,EALM,KAKKC,EALL,OAMuBT,mBAAS,GANhC,mBAMNU,EANM,KAMMC,EANN,OAOuCX,mBAAS,GAPhD,mBAONY,EAPM,KAOcC,EAPd,OAQ2Cb,mBAAS,OARpD,mBAQNc,EARM,KAQgBC,EARhB,KAWbC,qBAAU,WAERC,EAAiBb,EAAQE,EAAOE,MAIlCQ,qBAAU,WACRd,aAAagB,QAAQ,SAAUd,GAC/BF,aAAagB,QAAQ,QAASZ,GAC9BJ,aAAagB,QAAQ,YAAaV,KACjC,CAACJ,EAAQE,EAAOE,IAGnB,IAAMW,EAAe,SAACC,GACpBf,EAAUe,GACVH,EAAiBG,EAAUd,EAAOE,IAa9BS,EAAmB,SAACb,EAAQE,EAAOE,GACvC,IACIa,EADkBjB,EAAS,IACWE,EAAQE,EAClDG,EAAcU,GAEd,IAAIC,EAA4BC,KAAKC,MAAMH,EAAoB,IAC/DR,EAAsBS,GAEtB,IAAIG,EAAmBF,KAAKG,KAAuC,KAAjC,GAAML,EAAoB,KAC5DN,EAAwBU,IAG1B,OACE,eAACE,EAAA,EAAD,CAAWC,UAAU,OAArB,UACE,cAACC,EAAA,EAAD,CAAKD,UAAU,yBAAf,SACE,cAACE,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,aAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,8CACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,IAAK,EAAGC,SAAU,SAACC,GAAD,OAAOrB,EAAalB,SAASuC,EAAEC,OAAOC,SAASA,MAAkB,IAAXtC,EAAeA,EAAS,KAC5H,eAACyB,EAAA,EAAD,CAAKD,UAAU,OAAf,UACE,cAACE,EAAA,EAAD,UACE,cAACa,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAM1B,EAAaf,EAAS,KAAvE,qCAEF,cAAC0B,EAAA,EAAD,UACE,cAACa,EAAA,EAAD,CAAQf,UAAU,YAAYgB,QAAQ,kBAAkBC,QAAS,kBAAM1B,EAAaf,EAAS,KAA7F,sCAIN,eAAC4B,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,YAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,0CACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,IAAK,EAAGC,SAAU,SAACC,GAAD,OAzCrCpB,EAyCwDnB,SAASuC,EAAEC,OAAOC,OAxC7FnC,EAASa,QACTH,EAAiBb,EAAQgB,EAAUZ,GAFjB,IAACY,GAyCmFsB,MAAiB,IAAVpC,EAAcA,EAAQ,QAE3H,eAAC0B,EAAA,EAAKC,MAAN,CAAYL,UAAU,OAAOM,UAAU,iBAAvC,UACE,cAACF,EAAA,EAAKG,MAAN,oDACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,IAAK,EAAGC,SAAU,SAACC,GAAD,OAxCjCpB,EAwCwDnB,SAASuC,EAAEC,OAAOC,OAvCjGjC,EAAaW,QACbH,EAAiBb,EAAQE,EAAOc,GAFV,IAACA,GAwCmFsB,MAAqB,IAAdlC,EAAkBA,EAAY,eAK7I,cAACqB,EAAA,EAAD,CAAKD,UAAU,yBAAf,SACE,eAACE,EAAA,EAAD,CAAKC,GAAI,EAAGe,MAAO,CAACC,UAAY,UAAhC,UACE,oBAAGnB,UAAU,UAAb,oCAA+CL,KAAKC,MAAMd,MAC1D,yDAA4BE,EAA5B,IAAwE,IAAvBA,EAA2B,OAAS,WACrF,4CAAc,sBAAMkC,MAAO,CAACE,MAAO,WAArB,SAAkClC,IAAhD,mDC1FVmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1db21288.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { useState, useEffect } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nfunction App() {\n\n  // state hooks\n  const [primos, setPrimos] = useState(parseInt(localStorage.getItem(\"primos\")) || parseInt(0));\n  const [fates, setFates] = useState(parseInt(localStorage.getItem(\"fates\")) || parseInt(0));\n  const [prevPulls, setPrevPulls] = useState(parseInt(localStorage.getItem(\"prevPulls\")) || parseInt(0));\n  const [totalPulls, setTotalPulls] = useState(0);\n  const [numberOfHardPities, setNumberOfHardPities] = useState(0);\n  const [primosToNextHardPity, setPrimosToNextHardPity] = useState(14400);\n\n  // useEffect to run a function on page load\n  useEffect(() => {\n    // set the total pulls and hard pity state variables from saved values\n    updateTotalPulls(primos, fates, prevPulls);\n  });\n\n  // use useEffect to save values to local storage when ever values are updated\n  useEffect(() => {\n    localStorage.setItem(\"primos\", primos);\n    localStorage.setItem(\"fates\", fates);\n    localStorage.setItem(\"prevPulls\", prevPulls);\n  }, [primos, fates, prevPulls]);\n\n  // functions to update state\n  const updatePrimos = (newValue) => {  // newValue is a number\n    setPrimos(newValue);\n    updateTotalPulls(newValue, fates, prevPulls);\n  };\n\n  const updateFates = (newValue) => {\n    setFates(newValue);\n    updateTotalPulls(primos, newValue, prevPulls);\n  };\n\n  const updatePrevPulls = (newValue) => {\n    setPrevPulls(newValue);\n    updateTotalPulls(primos, fates, newValue);\n  }\n\n  const updateTotalPulls = (primos, fates, prevPulls) => {\n    let pullsFromPrimos = primos / 160;\n    let updatedTotalPulls = pullsFromPrimos + fates + prevPulls\n    setTotalPulls(updatedTotalPulls);\n\n    let updatedNumberOfHardPities = Math.floor(updatedTotalPulls / 90);\n    setNumberOfHardPities(updatedNumberOfHardPities);\n\n    let primosToNextPity = Math.ceil((90 - (updatedTotalPulls % 90)) * 160);\n    setPrimosToNextHardPity(primosToNextPity);\n  }\n\n  return (\n    <Container className=\"mt-4\" >\n      <Row className=\"justify-content-center\">\n        <Col lg={6}>\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"primos-amt\">\n              <Form.Label>How many Primogems do you have?</Form.Label>\n              <Form.Control type=\"number\" min={0} onChange={(e) => updatePrimos(parseInt(e.target.value))} value={primos !== 0 ? primos : \"\"}></Form.Control>\n              <Row className=\"mt-1\">\n                <Col >\n                  <Button variant=\"outline-primary\" onClick={() => updatePrimos(primos + 60)}>Add Commissions (+60)</Button>\n                </Col>\n                <Col>\n                  <Button className=\"float-end\" variant=\"outline-primary\" onClick={() => updatePrimos(primos + 90)}>Add Welkin (+90)</Button>\n                </Col>\n              </Row>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"fates-amt\">\n              <Form.Label>How many Fates do you have?</Form.Label>\n              <Form.Control type=\"number\" min={0} onChange={(e) => updateFates(parseInt(e.target.value))} value={fates !== 0 ? fates : \"\"}></Form.Control>\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"prev-pulls-amt\">\n              <Form.Label>How many pulls have you already done?</Form.Label>\n              <Form.Control type=\"number\" min={0} onChange={(e) => updatePrevPulls(parseInt(e.target.value))} value={prevPulls !== 0 ? prevPulls : \"\"}></Form.Control>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col lg={6} style={{textAlign : \"center\"}}>\n          <p className=\"h4 mb-3\">Total Pulls on Banner: {Math.floor(totalPulls)}</p>\n          <div>You can hit hard pity {numberOfHardPities} {numberOfHardPities === 1 ? 'time' : 'times'}</div>\n          <div>You need <span style={{color: \"#0d6efd\"}}>{primosToNextHardPity}</span> primos to reach your next hard pity</div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}